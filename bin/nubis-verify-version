#!/bin/bash
#
# In a multi developer environment your version numbers may collide, the proper solution
# is to force versioning through a build automation pipeline but for now we're going to
# query the AMI registry here and do some additional checking. Otherwise, you just wasted
# 5 minutes of your time and have to kick off the build again.

usage(){
   if [[ $# -gt 0 ]]; then
      echo "$@"
      echo
   fi

   echo "Usage: $0 --build-file <path to project.json>"
   echo
   echo "This script will query Amazon's AMI list and verify that the project name and"
   echo "version are unique."
   echo
   exit 1
}

fail(){
   echo "$@"
   echo
   exit 1
}

hash jq 2>/dev/null || fail "Please install jq to use this build tool. https://github.com/stedolan/jq"
hash aws 2>/dev/null || fail "Please install the AWS CLI API to use this build tool. https://aws.amazon.com/cli/"

while [[ ! -z "$1" ]]; do
   case "$1" in
      --build-file)
         if [[ "$2" ]]; then
            if [[ -r "$2" ]]; then
               build_file="$2"
            else
               fail "File $2 is unreadable"
            fi
         else
            fail "Must pass parameter to --build-file"
         fi
         shift
         ;;
      *)
         usage "Invalid option $1"
    esac
    shift
done

if [[ ! "$build_file" ]]; then
   usage "--build-file is a required parameter"
fi

aws_region=$(jq --raw-output '"\(.variables.aws_region)"' < $build_file)
# Verify that the region was specified
if [[ "${aws_region:-null}" == "null" ]]; then
   fail "Region not specified in $build_file, exiting"
fi

project_name=$(jq --raw-output '"\(.variables.project_name)"' < $build_file)
# Verify that the project name
if [[ "${project_name:-null}" == "null" ]]; then
   fail "Project name not specified in $build_file, exiting"
fi

# Grab access aws_secret_access_key from the build file
aws_access_key_id=$(jq --raw-output '"\(.variables.aws_access_key)"' < $build_file)
aws_secret_access_key=$(jq --raw-output '"\(.variables.aws_secret_key)"' < $build_file)

if [[ "${aws_access_key_id:-null}" == "null" ]] || [[ "${aws_secret_access_key:-null}" == "null" ]]; then
   fail "This tool requires aws_access_key and aws_secret_key to be defined in the build file"
fi

# Build AWS config file using the credentials from
aws_config=$(mktemp /tmp/aws.XXXXXXXX)

# Write config
cat << EOF > $aws_config
[default]
aws_access_key_id = $aws_access_key_id
aws_secret_access_key = $aws_secret_access_key
EOF

# Parse local project version
project_local_version=$(jq --raw-output '"\(.variables.project_version)"' < $build_file)
project_local_major=${project_local_version%.*}
project_local_minor=${project_local_version#*.}

# Query EC2 AMIs for our project
latest_ami_json=$(AWS_CONFIG_FILE=$aws_config aws --output json --region $aws_region ec2 describe-images --owners self --filters "Name=tag:project,Values=${project_name}")

# Clean up temp config
rm -f $aws_config

if [[ "$latest_ami_json" ]]; then
   project_ami_version=$(echo "$latest_ami_json" | jq -r '[.Images[] | .Tags[] | select(.Key=="version")] | sort_by(.Value | split(".") | map(tonumber)) | .[length-1] | .Value')

   if [[ "$project_ami_version" ]]; then
      # Version collision is a bit of a misnomer since we're not actually checking if the local version already
      # exists at Amazon. Instead we are looking to see if our local version is less than the latest published AMI.
      project_ami_major=${project_ami_version%.*}
      project_ami_minor=${project_ami_version#*.}

      # Might be doing something dumb here.. version is ${release}.${build} which gets odd when you compare say 2.8 and 2.10,
      # when in fact 2.10 is later but is numerically less than 2.8. I'll buy you a beer if this trips you up. - Brian
      (("$project_ami_major" <= "$project_local_major")) && (("$project_ami_minor" < "$project_local_minor"))
      if [[ $? -eq 1 ]]; then
         ((project_ami_minor += 1))

         fail "Version collision detected! $project_name already has a published AMI at ${project_ami_version}, and we're trying to build ${project_local_version}. Please edit project.json and bump the version to ${project_ami_major}.${project_ami_minor} or higher."
      else
         echo "OK: Project is at local version ${project_local_version}, latest published version is ${project_ami_version} in ${aws_region}."
      fi
   else
      echo "WARNING: json parsing failure when searching AMI for other versions of ${project_name}."
   fi
else
   echo "OK: No published AMIs of ${project_name} in ${aws_region}."
fi


#!/bin/bash
#
# In a multi developer environment your version numbers may collide, the proper solution
# is to force versioning through a build automation pipeline but for now we're going to
# query the AMI registry here and do some additional checking. Otherwise, you just wasted
# 5 minutes of your time and have to kick off the build again.

usage(){
   if [[ $# -gt 0 ]]; then
      echo "$@"
      echo
   fi

   echo "Usage: $0 --project-file <path to project.json>"
   echo
   echo "This script will query Amazon's AMI list and verify that the project name and"
   echo "version are unique."
   echo
   exit 1
}

fail(){
   echo "$@"
   echo
   exit 1
}

hash jq 2>/dev/null || fail "Please install jq to use this build tool. https://github.com/stedolan/jq"
hash aws 2>/dev/null || fail "Please install the AWS CLI API to use this build tool. https://aws.amazon.com/cli/"

while [[ ! -z "$1" ]]; do
   case "$1" in
      --project-file)
         if [[ "$2" ]]; then
            if [[ -r "$2" ]]; then
               project_file="$2"
            else
               fail "File $2 is unreadable"
            fi
         else
            fail "Must pass parameter to --project-file"
         fi
         shift
         ;;
      *)
         usage "Invalid option $1"
    esac
    shift
done

if [[ ! "$project_file" ]]; then
   usage "--project-file is a required parameter"
fi

aws_region=$(jq --raw-output '"\(.variables.aws_region)"' < $project_file)
project_name=$(jq --raw-output '"\(.variables.project_name)"' < $project_file)
project_local_version=$(jq --raw-output '"\(.variables.project_version)"' < $project_file)

latest_ami_json=$(aws --output json --region $aws_region ec2 describe-images --owners self --filters "Name=tag:project,Values=${project_name}")
if [[ "$latest_ami_json" ]]; then
   project_ami_version=$(echo "$latest_ami_json" | jq -r '[.Images[] | .Tags[] | select(.Key=="version")] | sort_by(.Value) | .[length-1] | .Value')

   if [[ "$project_ami_version" ]]; then
      # Version collision is a bit of a misnomer since we're not actually checking if the local version already
      # exists at Amazon. Instead we are looking to see if our local version is lower than the latest published AMI.

      # Bash won't evaluate floating point numbers, so we'll use awk for that.
      awk "BEGIN { exit ($project_ami_version >= $project_local_version) ? 1 : 0 }"
      if [[ $? -eq 1 ]]; then
         project_major=${project_ami_version%.*}
         project_minor=${project_ami_version#*.}
         ((project_minor += 1))

         fail "Version collision detected! $project_name already has a published AMI at ${project_ami_version}, and we're trying to build ${project_local_version}. Please edit $project_file and bump the version to ${project_major}.${project_minor} or higher."
      else
         echo "OK: Project is at local version ${project_local_version}, latest published version is ${project_ami_version}."
      fi
   else
      echo "WARNING: json parsing failure when searching AMI for other versions of ${project_name}."
   fi
else
   echo "OK: No published AMIs of ${project_name}."
fi


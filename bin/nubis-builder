#!/bin/bash

# Globals
packer_options=""

# Print some help
usage() {
   if [[ $# -gt 0 ]]; then
      echo "ERROR: $*"
      echo
   fi

   echo "Usage: $0 <build|test> --builder-prefix <path to nubis-builder checkout> --project-path <path to project> [--json-file <path to extra json files>] [--packer-option <option>] [--keep-json] [--verbose]"
   echo
   echo "This script is the nubis build tool which will take a local check out of a project and"
   echo "subject it to the build processes that have been developed for the nubis project."
   echo
   echo "It requires that bin/ is in your \$PATH, for now."
   exit 1
}

# Print messages
message_print(){
   local exit_after=0

   case "$1" in
      OK)
         code="0"
         color="0;32"
         ;;
      WARNING)
         code="1"
         color="0;33"
         ;;
      CRITICAL)
         code="2"
         color="1;31"
         exit_code=1
         ;;
   esac

   if [[ -t 1 ]]; then
      echo -e "\033[${color}m${2}\033[0m"
   else
      echo "${1}: ${2}"
   fi

   if [[ -n "$3" ]]; then
      echo
      echo "$3"
      echo
   fi

   if [[ $exit_code -gt 0 ]]; then
      # Remove any temporary files, preserving them if --keep-json was enabled.
      cleanup
      exit $exit_code
   fi
}

# Clean up our temporary files
cleanup(){
   for json in $nubis_build_file $packer_template_file $ami_json_file; do
      if [[ "$json" ]] && [[ -f "$json" ]]; then
         if [[ ${keep_json:-0} -eq 1 ]]; then
            verbose_print "Sanitizing $json"
            sanitize_json $json
         fi

         verbose_print "Cleaning up $json"
         rm -f $json
      fi
   done
}

# Print verbose messages
verbose_print(){
   if [[ ${verbose:-0} -eq 1 ]]; then
      lines=$(wc -l <<< "$1")

      (if [[ $lines -gt 1 ]]; then
         echo -e "\033[1;37m${1}\033[0m"
      else
         echo "$1"
      fi) | awk "{ if (NR == 1){ printf \"$(date +%s): %s\n\", \$0 } else { printf \"                      %s\n\", \$0 } }"
   fi
}

if [[ $# -lt 1 ]]; then
   usage
fi

# We call this every time we find a json file we want to read in, the jq command below will
# merge all elements
load_json(){
   local json_tmp_file

   json_tmp_file=$(mktemp /tmp/builder.json.XXXXXXXX)
   if [[ "$nubis_build_file" ]] && [[ -s "$nubis_build_file" ]]; then
      jq -s 'def flatten: reduce .[] as $i([]; if $i | type == "array" then . + ($i | flatten) else . + [$i] end); [.[] | to_entries] | flatten | reduce .[] as $dot ({}; .[$dot.key] += $dot.value)' $nubis_build_file $1 > $json_tmp_file

      if [[ $? -ne 0 ]]; then
         rm -f $json_tmp_file
         message_print CRITICAL "jq failed"
      fi

      rm -f $nubis_build_file
   else
      cat $1 > $json_tmp_file
   fi

   nubis_build_file=$json_tmp_file
}

# Sanitize json file after an error, hopefully this will help prevent accidental credential disclosure
# by leaving files in /tmp
sanitize_json(){
   # Build a more sensible path name that's related to the project and the file's purpose
   project_name=$(jq --raw-output '"\(.variables.project_name)"' 2>/dev/null < $project_path/nubis/builder/project.json)
   output_name=$(basename $1)

   sanitized_json_file=$(mktemp /tmp/${project_name:-nubis-UNKNOWN}.${output_name%%.*}.json.XXXXXXXX)
   json_data=$(cat $1)

   for variable in .variables.aws_access_key .variables.aws_secret_key .variables.aws_account_id .variables.aws_x509_cert_path .variables.aws_x509_key_path; do
      variable_data=$(echo "$json_data" | jq "$variable")
      if [[ "${variable_data:-null}" != "null" ]]; then
         json_data=$(echo "$json_data" | jq "$variable = \"<REDACTED>\"")
      fi
   done

   echo "$json_data" > $sanitized_json_file
   if [[ $? -eq 0 ]]; then
      echo "Sanitized json file $1 into $sanitized_json_file"
   else
      echo "Failed to sanitize json file $1"
   fi
}

# Remove json bits that we don't want to feed into packer and put it into a new file
generate_packer_template(){
   packer_template_file=$(mktemp /tmp/packer_template.json.XXXXXXXX)
   verbose_print "Generating packer template $packer_template_file"

   # We add a meta parameter 'order' to the provisioners to ensure write our order, as packer
   # executes them chronologically.
   #
   # We also add the array 'builders' into the variables that dictates which builders
   # we load, and packer doesn't consume that either.
   jq '. + { "provisioners": .provisioners | sort_by(.order | tonumber) } |
       del(.provisioners[] | .order) |
       del(.variables.builders)' < $nubis_build_file > $packer_template_file

   if [[ $? -ne 0 ]]; then
      message_print CRITICAL "generate_packer_template: jq failed"
   fi
}

# Verify that our local build version won't collide with what's already at Amazon,
# if automatic_version_bump is set then we will automatically find and set the project's
# version to be the latest version.
verify_version(){
   local automatic_version_verify

   automatic_version_verify=$(jq --raw-output '"\(.variables.automatic_version_verify)"' < $nubis_build_file)
   if [[ ${automatic_version_verify:-0} -eq "1" ]]; then
      verbose_print "Running nubis-verify-version --build-file $nubis_build_file --project-path $project_path"
      nubis-verify-version --build-file $nubis_build_file --project-path $project_path
      if [[ $? -ne 0 ]]; then
         message_print CRITICAL "nubis-verify-version had non-zero exit status"
      fi
   else
      verbose_print "Skipping version verification"
   fi
}

# Bump project version automatically, if enabled
bump_version(){
   local automatic_version_bump
   local automatic_version_verify

   automatic_version_bump=$(jq --raw-output '"\(.variables.automatic_version_bump)"' < $nubis_build_file)
   if [[ ${automatic_version_bump:-0} -eq "1" ]]; then
      automatic_version_verify=$(jq --raw-output '"\(.variables.automatic_version_verify)"' < $nubis_build_file)
      if [[ ${automatic_version_verify:-0} -eq "1" ]]; then
         verbose_print "Skipping automatic version increment, automatic_version_verify will ensure our version is unique"
         return
      fi

      verbose_print "Running nubis-bump-version --project-file $project_path/nubis/builder/project.json --build $nubis_bump_version_args"
      nubis-bump-version --project-file $project_path/nubis/builder/project.json --minor

      if [[ $? -ne 0 ]]; then
         message_print CRITICAL "nubis-bump-version had non-zero exit status"
      fi

      load_json $project_path/nubis/builder/project.json
   else
      verbose_print "Skipping automatic project build number bump because automatic_version_bump is set to disabled"
   fi
}

# Work out what AMI we're build on top of, and load the IDs
load_source_ami_ids(){
   # Get source project name, and version if set.
   if [[ ${source_ami_project_name:-null} == null ]]; then
      message_print CRITICAL "source_ami_project_name is a required parameter in the project file"
   fi

   ami_json_file=$(mktemp /tmp/source_ami_ids.json.XXXXXXXX)

   if [[ "$source_ami_project_name" == "base" ]]; then
      # Base image building is a special case where we look up official base images from Amazon and Canonical
      # so we have to hard code this exception.
      if [[ "${source_ami_project_version:-null}" != "null" ]]; then
         message_print CRITICAL "source ami version pinning is not supported when building base images"
      fi

      verbose_print "Running generate-base-ami-ids --json-file $nubis_build_file --output-file $ami_json_file"
      generate-base-ami-ids --build-file $nubis_build_file --output-file $ami_json_file
      if [[ $? -ne 0 ]]; then
         message_print CRITICAL "generate-base-ami-ids failed"
      fi
   else
      generate_source_ami_ids_args="--source-project-name $source_ami_project_name --build-file $nubis_build_file --output-file $ami_json_file"
      if [[ "$source_ami_project_version" != "null" ]]; then
         generate_source_ami_ids_args="$generate_source_ami_ids_args --source-project-version $source_ami_project_version"
      fi

      verbose_print "Running generate-source-ami-ids $generate_source_ami_ids_args"
      generate-source-ami-ids $generate_source_ami_ids_args
      if [[ $? -ne 0 ]]; then
         message_print CRITICAL "generate-source-ami-ids failed"
      fi
   fi

   verbose_print "Loading $ami_json_file"
   load_json $ami_json_file
}

# Kick off librarian-puppet and/or load puppet provisioners
load_puppet(){
   if [[ -f ${project_path}/nubis/Puppetfile ]]; then
      verbose_print "Running nubis-librarian-puppet --librarian-puppetfile $project_path/nubis/Puppetfile --librarian-puppet-path ${project_path}/nubis/nubis-puppet --json-file $nubis_build_file"
      nubis-librarian-puppet --librarian-puppetfile $project_path/nubis/Puppetfile --librarian-puppet-path ${project_path}/nubis/nubis-puppet --json-file $nubis_build_file

      if [[ $? -ne 0 ]]; then
         message_print CRITICAL "nubis-librarian-puppet failed"
      fi

      load_json $builder_prefix/packer/provisioners/librarian-puppet-masterless.json
   else
      verbose_print "Skipping librarian puppet, ${project_path}/nubis/Puppetfile not found"

      # Load puppet provisioner if the project has a local puppet directory
      if [[ -d ${project_path}/nubis/puppet ]]; then
         load_json $builder_prefix/packer/provisioners/puppet-masterless.json
      fi
   fi
}

build(){
   while [[ ! -z "$1" ]]; do
      case "$1" in
         --builder-prefix)
            if [[ "$2" ]]; then
               if [[ -d "$2" ]]; then
                  builder_prefix="$2"
               else
                  message_print CRITICAL "$2 doesn't exist or is not a directory"
               fi
            else
               message_print CRITICAL "$1: missing parameter"
            fi
            shift
            ;;
         --project-path)
            if [[ "$2" ]]; then
               if [[ -d "$2" ]]; then
                  if [[ -f "$2/nubis/builder/project.json" ]]; then
                     project_path="$2"
                  else
                     message_print CRITICAL "$2/nubis/builder/project.json not found"
                  fi
               else
                  message_print CRITICAL "$2 doesn't exist or is not a directory"
               fi
            else
               message_print CRITICAL "$1: missing parameter"
            fi
            shift
            ;;
         --json-file)
            if [[ "$2" ]]; then
               if [[ -f "$2" ]]; then
                  json_files="$json_files $2"
               else
                  message_print CRITICAL "$2 doesn't exist or is not a file"
               fi
            else
               message_print CRITICAL "$1: missing parameter"
            fi
            shift
            ;;
         --packer-option)
            packer_options="$packer_options $2"
            shift
            ;;
         --keep-json)
            keep_json=1
            ;;
         --verbose)
            verbose=1
            ;;
         *)
            usage "Invalid option $1"
       esac
       shift
   done

   if [[ ! "$builder_prefix" ]]; then
      usage "--builder-prefix is a required parameter"
   fi

   if [[ ! "$project_path" ]]; then
      usage "--builder-prefix is a required parameter"
   fi

   # We have our own tooling in $builder_prefix/bin, and if the project has their own build tools let's make them available
   PATH=$PATH:$builder_prefix/bin:$project_path:/bin

   # Load json files
   for i in $builder_prefix/secrets/*.json ${project_path}/nubis/builder/*.json $json_files; do
      if [[ -f $i ]]; then
         verbose_print "Loading $i"
         load_json $i
      fi
   done

   # Load builders
   for builder in $(jq --raw-output '"\(.variables.builders[])"' < $nubis_build_file); do
      if [[ -f ${builder_prefix}/packer/builders/${builder}.json ]]; then
         verbose_print "Loading builder $builder from ${builder_prefix}/packer/builders"
         load_json ${builder_prefix}/packer/builders/${builder}.json
      elif [[ -f ${project_path}/nubis/builder/${builder}.json ]]; then
         verbose_print "Loading builder $builder from ${project_path}/nubis/packer"
         load_json ${project_path}/nubis/builder/${builder}.json
      else
         message_print CRITICAL "Builder $builder was specified, but $builder_prefix/packer/builders/$builder.json doesn't exist"
      fi
   done

   # Get the project name and version, these variables are used in some of the functions
   # called below
   source_ami_project_name=$(jq --raw-output '"\(.variables.source_ami_project_name)"' < $nubis_build_file)
   source_ami_project_version=$(jq --raw-output '"\(.variables.source_ami_project_version)"' < $nubis_build_file)

   # Look up and load source AMI IDs
   load_source_ami_ids

   # Kick off librarian-puppet, if enabled
   load_puppet

   # Bump the version minor
   bump_version

   # Verify the version is newer than already published AMIs
   verify_version

   # Generate packer's template file
   generate_packer_template

   # Run packer
   verbose_print "Running packer build $packer_template_file"
   cd $project_path && packer build $packer_options $packer_template_file
   if [[ $? -ne 0 ]]; then
      message_print CRITICAL "packer failed"
   fi
}

hash jq 2>/dev/null || message_print CRITICAL "Please install jq to use this build tool. https://github.com/stedolan/jq"
hash aws 2>/dev/null || message_print CRITICAL "Please install the AWS CLI API to use this build tool. https://aws.amazon.com/cli/"
hash packer 2>/dev/null || message_print CRITICAL "Please install packer to use this build tool. https://packer.io/"

case "$1" in
   build)
      shift 1
      build $@
      cleanup
      ;;
   test)
      message_print CRITICAL "Testing is not yet supported"
      ;;
   *)
      usage "Invalid option: $1"
      exit 1
      ;;
esac

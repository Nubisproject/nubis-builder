#!/bin/bash

if [[ $# -lt 1 ]]; then
   echo "This tool searches the Amazon AMI registry, sorts the results, and returns a single AMI ID"
   echo "that corresponds to the most recent image as determined by jq sort."
   echo
   echo "Usage: $0 --build-file <build file> --output-file <generated json> --owners <owners> --region <aws region> [--<filter name> <value>] [--<filter name> <value>] [<...>]"
   echo
   echo "Underlying AWS CLI documentation:"
   echo "http://docs.aws.amazon.com/cli/latest/reference/ec2/describe-images.html"
   echo
   echo "Filter names are all filters listed in the Amazon documentation above, such as"
   echo "architecture, block-device-mapping.volume-type, virtualization-type, etc."
   echo
   echo "Examples:"
   echo
   echo "Example command to find the latest GP2 Amazon Linux AMI:"
   echo "aws-find-ami --owners amazon --region us-west-2 --virtualization-type hvm --root-device-type ebs --architecture x86_64 --block-device-mapping.volume-type gp2 --name 'amzn-ami-hvm-*'"
   echo
   echo "Example command to find the latest official GP2 Ubuntu Trusty AMI:"
   echo "aws-find-ami --owners 099720109477 --region us-west-2 --virtualization-type hvm --root-device-type ebs --architecture x86_64 --block-device-mapping.volume-type gp2 --name 'ubuntu/images/hvm-ssd/ubuntu-trusty-14.04*'"
   echo
   echo "Note: Owner 099720109477 is Canonical."
   echo
   echo "If you wish to inspect the details about the AMI that this tool selected for you use the"
   echo "AWS CLI tool to view details."
   echo
   echo "Example command:"
   echo
   echo "aws --output json --region us-west-2 ec2 describe-images --image-ids ami-adc39a9d"
   echo
   exit 1
fi

fail(){
   echo "$@"
   exit 1
}

aws_owners=""
aws_filters=""
build_file=""

hash jq 2>/dev/null || fail "Please install jq to use this build tool. https://github.com/stedolan/jq"
hash aws 2>/dev/null || fail "Please install the AWS CLI API to use this build tool. https://aws.amazon.com/cli/"

while [[ "$1" ]]; do
   case "$1" in
      --owners)
         aws_owners="$2"
         shift
         ;;
      --region)
         aws_region="$2"
         shift
         ;;
      --build-file)
         if [[ -f $2 ]]; then
            build_file=$2
         else
            fail "Build file $2 is unreadable"
         fi
         shift
         ;;
      --output-file)
         if [[ -w $2 ]]; then
            output_file=$2
         else
            fail "Output file $2 is unwritable"
         fi
         shift
         ;;
      --*)
         if [[ "$2" ]]; then
            aws_filters="$aws_filters Name=${1:2},Values=$2"
         else
            fail "missing parameter for $1"
         fi
         shift
         ;;
      *)
         fail "Invalid parameter passed \"$1\""
         ;;
    esac
    shift
done

if [[ ! "$aws_owners" ]]; then
   fail "The parameter --owners is required."
fi

if [[ ! "$aws_region" ]]; then
   fail "The parameter --region is required."
fi

if [[ ! "$build_file" ]]; then
   fail "The parameter --build-file is required."
fi

if [[ ! "$output_file" ]]; then
   fail "The parameter --output-file is required."
fi

# Grab access aws_secret_access_key from the build file
aws_access_key_id=$(jq --raw-output '"\(.variables.aws_access_key)"' < $build_file)
aws_secret_access_key=$(jq --raw-output '"\(.variables.aws_secret_key)"' < $build_file)

if [[ "${aws_access_key_id:-null}" == "null" ]] || [[ "${aws_secret_access_key:-null}" == "null" ]]; then
   fail "This tool requires aws_access_key and aws_secret_key to be defined in the build file"
fi

# Build AWS config file using the credentials from 
aws_config=$(mktemp /tmp/aws.XXXXXXXX)

# Write config
cat << EOF > $aws_config
[default]
aws_access_key_id = $aws_access_key_id
aws_secret_access_key = $aws_secret_access_key
EOF

# Build JSON formatted list of Amazon AMIs
aws_ami_description=$(AWS_CONFIG_FILE=$aws_config aws --output json --region $aws_region ec2 describe-images --owners $aws_owners --filters $aws_filters)

# A special case here for base IDs, as they won't have the nubis specific tags and we sort by a different key
source_ami_project_name=$(jq --raw-output '"\(.variables.source_ami_project_name)"' < $build_file)
if [[ "$source_ami_project_name" == "base" ]]; then
   # Sort base on image name
   aws_ami_id=$(echo "$aws_ami_description" | jq --raw-output '[.Images[] | {Name, ImageId}] | sort_by(.Name) | .[length-1] | .ImageId')
   aws_ami_name=$(echo "$aws_ami_description" | jq --raw-output ".Images[] | {Name, ImageId} | select(.ImageId==\"${aws_ami_id}\") | .Name")

   # I wish Amazon had a platform tag..
   case $aws_ami_name in
      ubuntu/*)
         aws_ami_platform="ubuntu"
         ;;
      amzn-ami-*)
         aws_ami_platform="amazon-linux"
         ;;
      *)
         fail "can't parse platform for ami id ${aws_ami_id}"
         aws_ami_platform="unknown"
         ;;
   esac
else
   # Get data based on nubis specific tags
   aws_ami_id=$(echo "$aws_ami_description" | jq --raw-output '[.Images[] | {id: .ImageId, version: .Tags[] | select(.Key == "version") | .Value}] | sort_by(.version | split(".") | map(tonumber)) | .[length-1] | .id')
   aws_ami_name=$(echo "$aws_ami_description" | jq --raw-output ".Images[] | {Name, ImageId} | select(.ImageId==\"${aws_ami_id}\") | .Name")
   aws_ami_platform=$(echo "$aws_ami_description" | jq --raw-output "[.Images[] | {ImageId, Tags}][] | select(.ImageId==\"${aws_ami_id}\") | [.Tags[] | select(.Key==\"platform\")][] | .Value")
   if [[ ! "$aws_ami_platform" ]]; then
      fail "ami id ${aws_ami_id} missing platform tag, aborting"
   fi
fi

aws_ami_rootdevicetype=$(echo "$aws_ami_description" | jq --raw-output ".Images[] | {RootDeviceType, ImageId} | select(.ImageId==\"${aws_ami_id}\") | .RootDeviceType")

# Clean up temporary config file
rm -f $aws_config

# Save results
json_key_prefix="aws_${aws_ami_platform/-/_}_${aws_ami_rootdevicetype/-/_}"

cat << EOF >> $output_file
{
  "variables": {
    "${json_key_prefix}_ami": "$aws_ami_id",
    "${json_key_prefix}_name": "$aws_ami_name",
    "${json_key_prefix}_platform": "$aws_ami_platform",
    "${json_key_prefix}_rootdevicetype": "$aws_ami_rootdevicetype"
  }
}

EOF

# Share what AMI name and description we're building against
project_name=$(jq --raw-output '"\(.variables.project_name)"' < $build_file)
echo "${project_name}: Builder ${json_key_prefix} is using ${aws_ami_name} (${aws_ami_id})"

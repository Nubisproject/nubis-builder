#!/bin/bash

usage(){
    if [[ "${#}" -gt 0 ]]; then
        echo -e "${*}\n"
    fi

    echo -e "Usage: ${0} --librarian-puppetfile ~/path-to-project/nubis/Puppetfile --librarian-puppet-path ~/path-to-project/nubis/librarian-puppet --json-file project.json [--verbose] [--clean]\n"
    echo -e "This script will invoke librarian-puppet inside ${LIBRARIAN_PUPPET_PATH}\n"
    echo -e "Script is designed to be invoked by nubis-builder\n"
    exit 1
}

fail(){
   echo -e "${*}\n"
   exit 1
}

hash librarian-puppet 2>/dev/null || fail "Please install librarian-puppet to use this build tool. https://github.com/rodjek/librarian-puppet"

if [[ "${#}" -lt 0 ]]; then
    usage
fi

while [[ ! -z "${1}" ]]; do
    case "${1}" in
        --librarian-puppetfile)
            if [[ -f "${2}" ]]; then
                LIBRARIAN_PUPPETFILE=$2
            else
                fail "Puppetfile ${2} doesn't exist or is not a valid file"
            fi
            shift
            ;;
        --librarian-puppet-path)
            LIBRARIAN_PUPPET_PATH="${2}"
            shift
            ;;
        --json-file)
            if [[ -f "${2}" ]]; then
                JSON_FILE="${2}"
            else
                fail "JSON file ${2} doesn't exist or is not a file"
            fi
            shift
            ;;
        --verbose)
            LIBRARIAN_PUPPET_ARGS='--verbose'
            ;;
        --clean)
            LIBRARIAN_PUPPET_CLEAN='1'
            ;;
        *)
            usage "Invalid option ${1}"
            ;;
    esac
    shift
done

if [[ ! "${LIBRARIAN_PUPPETFILE}" ]]; then
    usage "--librarian-puppetfile is a required argument"
fi

if [[ ! "${LIBRARIAN_PUPPET_PATH}" ]]; then
    usage "--librarian-puppet-path is a required argument"
fi

if [[ ! "${JSON_FILE}" ]]; then
    usage "--json-file is a required argument"
fi

PROJECT_NAME=$(jq --raw-output '"\(.variables.project_name)"' < "${JSON_FILE}")
# https://github.com/koalaman/shellcheck/wiki/SC2181
# shellcheck disable=SC2181
if [[ "$?" -ne 0 ]]; then
    fail "project_name isn't set in ${JSON_FILE}"
fi

LIBRARIAN_PUPPETFILE_DIRECTORY=$(dirname "${LIBRARIAN_PUPPETFILE}")

if [ "${LIBRARIAN_PUPPET_CLEAN}" == "1" ] ; then
    echo "${PROJECT_NAME}: Running librarian-puppet clean in ${LIBRARIAN_PUPPETFILE_DIRECTORY}"
    cd "${LIBRARIAN_PUPPETFILE_DIRECTORY}" || fail "ERROR: Can not cd into ${LIBRARIAN_PUPPETFILE_DIRECTORY}"
    if [ "${LIBRARIAN_PUPPET_ARGS}" ]; then
        librarian-puppet clean "${LIBRARIAN_PUPPET_ARGS}"
    else
        librarian-puppet clean
    fi
    rm -f "${LIBRARIAN_PUPPETFILE_DIRECTORY}/Puppetfile.lock" || fail "ERROR: Can not rm ${LIBRARIAN_PUPPETFILE_DIRECTORY}/Puppetfile.lock"
    rm -rf "${LIBRARIAN_PUPPET_PATH}/etc/puppet" || fail "ERROR: Can not rm ${LIBRARIAN_PUPPET_PATH}/etc/puppet"
fi

# We're prefixing everything with /etc/puppet/modules because tar --transform (GNU) isn't portable
# to BSD tar (such as on OSX).
echo "${PROJECT_NAME}: Creating ${LIBRARIAN_PUPPET_PATH}/etc/puppet/modules"
mkdir -p "${LIBRARIAN_PUPPET_PATH}/etc/puppet/modules" > /dev/null 2>&1

# Run librarian-puppet and fetch modules
echo "${PROJECT_NAME}: Running librarian-puppet install --path ${LIBRARIAN_PUPPET_PATH}/etc/puppet/modules"
cd "${LIBRARIAN_PUPPETFILE_DIRECTORY}" || fail "ERROR: Can not cd into ${LIBRARIAN_PUPPETFILE_DIRECTORY}"
    if [ "${LIBRARIAN_PUPPET_ARGS}" ]; then
        librarian-puppet install --path "${LIBRARIAN_PUPPET_PATH}/etc/puppet/modules" "${LIBRARIAN_PUPPET_ARGS}" || fail "librarian-puppet failed"
    else
        librarian-puppet install --path "${LIBRARIAN_PUPPET_PATH}/etc/puppet/modules" || fail "librarian-puppet failed"
    fi

# Package it up
echo "${PROJECT_NAME}: Running tar -C ${LIBRARIAN_PUPPET_PATH} --exclude='.git' -zpcf ${LIBRARIAN_PUPPETFILE_DIRECTORY}/librarian-puppet.tar.gz ."
tar -C "${LIBRARIAN_PUPPET_PATH}" --exclude='.git' -zpcf "${LIBRARIAN_PUPPETFILE_DIRECTORY}/librarian-puppet.tar.gz" . || fail "archive operation failed"


echo "${PROJECT_NAME}: Librarian puppet run complete"

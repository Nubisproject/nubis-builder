#!/bin/bash

if [[ $# -lt 1 ]]; then
   echo "Usage: $0 --role-name <IAM role name> --output-file <json output file>"
   echo
   echo "This tool will run aws sts assume-role and get temporary access credentials assuming"
   echo "the specified role name."
   exit 1
fi

fail(){
   echo "$@"
   exit 1
}

hash jq 2>/dev/null || fail "Please install jq to use this tool. https://github.com/stedolan/jq"
hash aws 2>/dev/null || fail "Please install the AWS CLI API to use this tool. https://aws.amazon.com/cli/"

while [[ "$1" ]]; do
   case "$1" in
      --role-name)
         if [[ ! "$2" ]]; then
            fail "Must pass parameter to $1"
         fi

         role_name="$2"
         shift
         ;;
      --output-file)
         if [[ -w "$2" ]]; then
            output_file=$2
         else
            fail "Output file $2 is unwritable"
         fi
         shift
         ;;
      *)
         fail "Invalid parameter passed \"$1\""
         ;;
    esac
    shift
done

role_arn=$(aws iam list-roles | jq --raw-output ".Roles[] | select(.RoleName==\"$role_name\") | .Arn")
if [[ "${role_arn:-null}" == "null" ]]; then
   fail "Unable to find role $1"
fi

aws_sts_credentials_json=$(aws sts assume-role --role-arn "$role_arn" --role-session-name packer | jq '.Credentials')
if [[ "${aws_sts_credentials_json:-null}" == "null" ]]; then
   fail "aws sts assume-role failed"
fi

aws_access_key_id=$(echo "$aws_sts_credentials_json" | jq --raw-output '"\(.AccessKeyId)"')
aws_secret_access_key=$(echo "$aws_sts_credentials_json" | jq --raw-output '"\(.SecretAccessKey)"')
aws_session_token=$(echo "$aws_sts_credentials_json" | jq --raw-output '"\(.SessionToken)"')

cat << EOF >> $output_file
{
  "variables": {
    "aws_sts_access_key": "${aws_access_key_id}",
    "aws_sts_secret_key": "${aws_secret_access_key}",
    "aws_sts_session_token": "${aws_session_token}"
  }
}

EOF

program_name=$(basename $0)
echo "${program_name}: Saved temporary credentials to $output_file"

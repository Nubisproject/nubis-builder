#!/bin/bash
#
# This script will bump the major and/or minor version numbers in the project json file,
# which is consumed by packer. This script is currently called by make which allows you
# to quickly build a series of AMIs quickly without an additional step.
#

usage(){
   if [[ $# -gt 0 ]]; then
      echo "$@"
      echo
   fi

   echo "Usage: $0 --project-file <path to project.json> [--major] [--minor] [--version <version>]"
   echo
   echo "This script will increment either the major or minor version number inside a project's json file,"
   echo "or set it to an explicit value."
   echo
   exit 1
}

fail(){
   if [[ -f "$tmp_json_file" ]]; then
      rm -f $tmp_json_file
   fi

   echo "$@"
   echo
   exit 1
}

hash jq 2>/dev/null || fail "Please install jq to use this build tool. https://github.com/stedolan/jq"

# Print help if ran without arguments
if [[ $# -lt 1 ]]; then
   usage
fi

# Globals
bump_major=0
bump_minor=0
version=""

while [[ ! -z "$1" ]]; do
   case "$1" in
      --project-file)
         if [[ "$2" ]]; then
            if [[ -w "$2" ]]; then
               project_file="$2"
            else
               fail "File $2 must be writable"
            fi
         else
            fail "Must pass parameter to --project-file"
         fi
         shift
         ;;
      --major)
         bump_major=1
         ;;
      --minor)
         bump_minor=1
         ;;
      --version)
         if [[ "$2" =~ [[:digit:]]+\.[[:digit:]] ]]; then
            version=$2
         else
            fail "Invalid version format $2, must match [[:digit:]]+\.[[:digit:]]"
         fi
         shift
         ;;
      *)
         usage "Invalid option $1"
    esac
    shift
done

if [[ ! "$project_file" ]]; then
   fail "--project-file is a required parameter"
fi

# Grab the version pre-bump just to confirm at the end what we did.
project_version=$(jq --raw-output '"\(.variables.project_version)"' < $project_file)
project_major=${project_version%.*}
project_minor=${project_version#*.}

# Create temp file
tmp_json_file=$(mktemp ${project_file}.XXXXXX)

if [[ $bump_major -eq 1 ]]; then
   # Bump major and set minor to 0
   version="$((project_major += 1)).0"
elif [[ $bump_minor -eq 1 ]]; then
   # Bump minor
   version="${project_major}.$((project_minor += 1))"
elif [[ "$version" ]]; then
   if [[ "$version" == "$project_version" ]]; then
      fail "version is already set to $version"
   fi
else
   fail "one of --major, --minor, or --version must be set"
fi

jq --sort-keys ".variables.project_version = \"${version}\"" < $project_file > $tmp_json_file
if [[ -s $tmp_json_file ]]; then
   mv -f $tmp_json_file $project_file
else
   rm -f $tmp_json_file
   fail "Failed to write to $tmp_json_file"
fi

# Confirm what we've done
project_name=$(jq --raw-output '"\(.variables.project_name)"' < $project_file)
project_bumped_version=$(jq --raw-output '"\(.variables.project_version)"' < $project_file)
echo "${project_name}: Bumped version from ${project_version} to ${project_bumped_version}"

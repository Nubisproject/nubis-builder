#!/bin/bash
#
# This script will bump the major and/or minor version numbers in the project json file,
# which is consumed by packer. This script is currently called by make which allows you
# to quickly build a series of AMIs quickly without an additional step.
#

usage(){
   if [[ $# -gt 0 ]]; then
      echo "$@"
      echo
   fi

   echo "Usage: $0 --project-file <path to project.json> [--major] [--minor]"
   echo
   echo "This script will increment either the major or minor version number inside a project's json file"
   echo
   echo "Increment the version major, resetting minor 1:"
   echo "$0 --project-file project.json --major"
   echo
   echo "Increment the version minor:"
   echo "$0 --project-file project.json --minor"
   echo
   exit 1
}

fail(){
   echo "$@"
   echo
   exit 1
}

hash jq 2>/dev/null || fail "Please install jq to use this build tool. https://github.com/stedolan/jq"
hash aws 2>/dev/null || fail "Please install the AWS CLI API to use this build tool. https://aws.amazon.com/cli/"

# Globals
bump_major=0
bump_minor=0

while [[ ! -z "$1" ]]; do
   case "$1" in
      --project-file)
         if [[ "$2" ]]; then
            if [[ -w "$2" ]]; then
               project_file="$2"
            else
               fail "File $2 must be writable"
            fi
         else
            fail "Must pass parameter to --project-file"
         fi
         shift
         ;;
      --major)
         bump_major=1
         ;;
      --minor)
         bump_minor=1
         ;;
      *)
         usage "Invalid option $1"
    esac
    shift
done

if [[ ! "$project_file" ]]; then
   usage "--project-file is a required parameter"
fi

# Grab the version pre-bump just to confirm at the end what we did.
project_version=$(jq --raw-output '"\(.variables.project_version)"' < $project_file)
project_major=${project_version%.*}
project_minor=${project_version#*.}

# Create temp file
tmp_json_file=$(mktemp ${project_file}.XXXXXX)

if [[ $bump_major -eq 1 ]]; then
   # Bump major and set minor to 0
   ((project_major += 1))
   project_minor=0
elif [[ $bump_minor -eq 1 ]]; then
   # Bump minor
   ((project_minor += 1))
else
   usage "either --major or --minor is required"
fi

jq ".variables.project_version = \"${project_major}.${project_minor}\"" < $project_file > $tmp_json_file
if [[ -s $tmp_json_file ]]; then
   mv -f $tmp_json_file $project_file
else
   rm -f $tmp_json_file
   fail "Failed to write to $tmp_json_file"
fi

# Confirm what we've done
project_name=$(jq --raw-output '"\(.variables.project_name)"' < $project_file)
project_bumped_version=$(jq --raw-output '"\(.variables.project_version)"' < $project_file)
echo "${project_name}: Bumped version from ${project_version} to ${project_bumped_version}"
